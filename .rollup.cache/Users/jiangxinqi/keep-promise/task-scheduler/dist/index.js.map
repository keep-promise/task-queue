{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @description: 实现功能：最大可执行并发任务\n */\n\ntype ITask= () => Promise<any>;\n\nexport class ConcurrentTask {\n  max: number;\n  count: number;\n  queue: ITask[];\n\n  constructor(max: number = 5) {\n    this.max = max;\n    this.count = 0;\n    this.queue = [];\n  }\n\n  /**\n   * @description: 添加任务队列\n   * @param {Task} task\n   * @return {*}\n   */  \n  add(task: ITask) {\n    this.queue.push(task);\n    this.next();\n  }\n\n  /**\n   * @description: 继续任务\n   * @return {*}\n   */  \n  next() {\n    if (this.count >= this.max) return;\n    const task: ITask| undefined = this.queue.shift();\n    if (!task) return;\n    this.count++;\n    task().then().catch().finally(() => {\n      this.count--;\n      this.next();\n    });\n  }\n}\n\n/**\n * @description: 实现功能：按顺序一次执行任务，只有等待上一个任务执行完成，才能执行下一个任务\n */\nexport class TaskQueue {\n  running: boolean;\n  queue: ITask[];\n\n  constructor() {\n    this.queue = [];\n    this.running = false;\n  }\n\n  add(task: ITask) {\n    this.queue.push(task);\n    if(!this.running) {\n      this.run();\n    }\n  }\n\n  run() {\n    const task: ITask | undefined = this.queue.shift();\n    if (!task) return;\n    this.running = true;\n    task().then().catch().finally(() => {\n      this.running = false;\n      this.run();\n    });\n  }\n\n  clear() {\n    this.queue = [];\n    this.running = false;\n  }\n\n}\n\nexport class TaskQueueIndex {\n  queue: ITask[];\n  nextIndex: number;\n  running: boolean;\n\n  constructor() {\n    this.queue = [];\n    this.nextIndex = 0;\n    this.running = false;\n  }\n\n  add(index: number, task: ITask) {\n    this.queue[index] = task;\n    if (!this.running && this.nextIndex === index) {\n      this.run();\n    }\n  }\n\n  run() {\n    const currentIndex = this.nextIndex;\n    const task: ITask| undefined = this.queue[currentIndex];\n    task().finally(() => {\n      this.nextIndex = currentIndex + 1;\n      this.running = false;\n      this.run();\n    });\n\n  }\n\n  clear() {\n    this.queue = [];\n    this.running = false;\n    this.nextIndex = 0;\n  }\n}\n\nconst TaskScheduler = {\n  ConcurrentTask,\n  TaskQueue,\n  TaskQueueIndex\n};\n\nexport default TaskScheduler;"]}